"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionManager = void 0;
const Entry_1 = require("./Entry");
const signalR = __importStar(require("@microsoft/signalr"));
class SubscriptionManager {
    constructor(accessToken) {
        this._accessToken = accessToken;
        this._subscriptions = {
            entryCreated: [],
            entryDeleted: [],
            entryUpdated: []
        };
        this._hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("https://ws.marcsync.dev/websocket?access_token=Bearer " + accessToken, {
            skipNegotiation: true,
            transport: signalR.HttpTransportType.WebSockets
        })
            .withAutomaticReconnect([0, 2000, 10000, 30000, 60000])
            .configureLogging(signalR.LogLevel.None)
            .build();
        this._hubConnection.start()
            .catch(err => {
            console.error(err.toString());
            process.exit(1);
        });
        this.handleSubscriptions();
    }
    subscribe(subscription, callback) {
        if (!this._subscriptions[subscription])
            this._subscriptions[subscription] = [];
        this._subscriptions[subscription].push(callback);
    }
    async handleSubscriptions() {
        this._hubConnection.on("entryCreated", (e) => {
            let d = JSON.parse(e);
            this._subscriptions.entryCreated.forEach(callback => { try {
                callback(new Entry_1.Entry(this._accessToken, d.data.collectionName, d.data.values), d.databaseId, d.timestamp);
            }
            catch (e) {
                console.error(e);
            } });
        });
        this._hubConnection.on("entryDeleted", (e) => {
            let d = JSON.parse(e);
            this._subscriptions.entryDeleted.forEach(callback => { try {
                callback(new Entry_1.BaseEntry(d.data.values, d.data.collectionName), d.databaseId, d.timestamp);
            }
            catch (e) {
                console.error(e);
            } });
        });
        this._hubConnection.on("entryUpdated", (e) => {
            let d = JSON.parse(e);
            this._subscriptions.entryUpdated.forEach(callback => { try {
                callback(new Entry_1.BaseEntry(d.data.oldValues, d.data.collectionName), new Entry_1.Entry(this._accessToken, d.data.collectionName, d.data.newValues), d.databaseId, d.timestamp);
            }
            catch (e) {
                console.error(e);
            } });
        });
    }
}
exports.SubscriptionManager = SubscriptionManager;
