"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Unauthorized = exports.Client = void 0;
const Collection_1 = require("./Collection");
const SubscriptionManager_1 = require("./SubscriptionManager");
class Client {
    /**
     *
     * @param accessToken - The access token to use for communication with MarcSync
     * @returns A new instance of the MarcSync client
     *
     */
    constructor(accessToken) {
        this._subscriptions = new SubscriptionManager_1.SubscriptionManager(accessToken);
        this._accessToken = accessToken;
    }
    /**
     *
     * @param collectionName - The name of the collection to use
     * @returns A new instance of the MarcSync collection
     *
     * @example
     *
     * import { Client } from "marcsync";
     *
     * const client = new Client("<my access token>");
     * const collection = client.getCollection("my-collection");
     *
    */
    getCollection(collectionName) {
        return new Collection_1.Collection(this._accessToken, collectionName);
    }
    /**
     *
     * @param collectionName - The name of the collection to use
     * @returns A new instance of the MarcSync collection
     *
     * @example
     *
     * import { Client } from "marcsync";
     *
     * const client = new Client("<my access token>");
     * const collection = client.fetchCollection("my-collection");
     *
     * @remarks
     * This method is useful if you want to fetch the collection from the server to check if it exists before using it.
     *
    */
    async fetchCollection(collectionName) {
        try {
            const result = await fetch(`https://api.marcsync.dev/v0/collection/${collectionName}`, {
                method: "GET",
                headers: {
                    authorization: this._accessToken
                }
            });
            if (result.status === 401)
                throw new Unauthorized();
            const json = await result.json();
            if (!json.success)
                throw new Error();
        }
        catch (e) {
            if (e instanceof Unauthorized)
                throw new Unauthorized();
            throw new Collection_1.CollectionNotFound();
        }
        return new Collection_1.Collection(this._accessToken, collectionName);
    }
    /**
     *
     * @param collectionName - The name of the collection to create
     * @returns A new instance of the MarcSync collection
     *
     * @example
     *
     * import { Client } from "marcsync";
     *
     * const client = new Client("<my access token>");
     * const collection = client.createCollection("my-collection");
     *
     * @remarks
    */
    async createCollection(collectionName) {
        try {
            const result = await fetch(`https://api.marcsync.dev/v0/collection/${collectionName}`, {
                method: "POST",
                headers: {
                    authorization: this._accessToken
                }
            });
            if (result.status === 401)
                throw new Unauthorized();
            const json = await result.json();
            if (!json.success)
                throw new Error();
        }
        catch (e) {
            if (e instanceof Unauthorized)
                throw new Unauthorized();
            throw new Collection_1.CollectionAlreadyExists();
        }
        return new Collection_1.Collection(this._accessToken, collectionName);
    }
    /**
     *
     * @param event - The event to listen to
     * @param listener - The listener to call when the event is emitted
     * @returns The client instance
     *
    */
    on(event, listener) {
        this._subscriptions.subscribe(event, listener);
        return this;
    }
    ;
}
exports.Client = Client;
class Unauthorized extends Error {
    constructor(message = "Invalid access token") {
        super(message);
    }
}
exports.Unauthorized = Unauthorized;
